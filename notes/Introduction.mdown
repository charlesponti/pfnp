# PROGRAMMING FOR NON*PROGRAMMERS

## What is Programming?
* A set of instructions, similar to a recipe, given to a machine, whether it be a computer of a mobile device, to execute in order to accomplish a task or provide a service.

## What Do Programs Actually Do?
* Keeping track of values (Variables)
* Making decisions (if -> else)
* Repeating things (loops)
* Displaying things (templating and style languages)
* Logging things (Log Files)
* Storing things (Databases such as PostgreSQL and MongoDB)

## What Can You Build?
* Web Sites
* Web Applications
* Native Apps (Mobile and Desktop)
* etc.

## Project Processes:
### Waterfall
![Waterfall Development Model](http://www.learnaccessvba.com/images/application_development/Waterfall_model.png)

Does one stage of the development process at a time, never to go back and repeat a previous step

### Agile
![Agile Development Model](http://www.tplex.com/images/tplex/AgileDevelopment.png)
	
Allows developers to jump from one stage to another and back again depending on what is needed to complete the job.

## Stages of Web Development

### 1. Design

#### User Experience

![User Experience](http://www.everyinteraction.com/wp-content/uploads/2012/10/ux-diagram.png)

User experience (UX) involves a person's behaviors, attitudes, and emotions about using a particular product, system or service. User experience includes the practical, experiential, affective, meaningful and valuable aspects of human-computer interaction and product ownership. Additionally, it includes a personâ€™s perceptions of system aspects such as utility, ease of use and efficiency. User experience may be considered subjective in nature to the degree that it is about individual perception and thought with respect to the system. User experience is dynamic as it is constantly modified over time due to changing usage circumstances and changes to individual systems as well as the wider usage context in which they can be found.  
  
#### Careers in Web Design
* **User Researcher** Indentifies user behaviors, goals, and needs through interviews, studies, and surveys

* **Information Architect(IA)** Defines the structure of the system, how content is described, organized, and discovered. For example, this can include designing a user's journey from the homepage of a shopping web application to the checkout page.

* **Interaction Designer(IxD)** Defines interactions, user flows, wireframes, and affordances of a system

* **UI Developer** Builds the user interface

### 2. Development

Web development is a broad term for the work involved in developing a web site for the Internet (World Wide Web) or an intranet (a private network). Web development can range from developing the simplest static single page of plain text to the most complex web-based internet applications, electronic businesses, and social network services. A more comprehensive list of tasks to which web development commonly refers, may include web design, web content development, client liaison, client-side/server-side scripting, web server and network security configuration, and e-commerce development. Among web professionals, "web development" usually refers to the main non-design aspects of building web sites: writing markup and coding.

## Languages
### What to look for in a language
* Community support
* Stack Overflow
* Difficulty level
* Development time
* Is what you want to accomplish going to happen on the front-end or the back-end?

## Front-End & Back-End

![Frond-End & Back-End Development](http://signedon.com/wp-content/uploads/2012/07/signedon-frontend-backend1.png)

### Front-End:
Front-end or client-side development is a relatively obscure Internet discipline. Historically, this role has been known under several aliases, htmler, web designer, coder, frontender and so on, but its core functions remain the same while expanding with the progress of the Internet. It is a hinge role that requires both aesthetic sensitivity and programmatic rigor.

To many people, client-side development might be perceived as 'making things pretty' and, while it is a valid comment since we do make things look good, as good-looking things sell better, there are many other technologies that fall within this field that might be usually overlooked. 
Here's an overview of some of them.

* Languages:
	* Template: HTML
	* Style: CSS
	* Behaviour: JavaScript
* Frameworks
	* Angular
	* Backbone
	* etc.
* Libraries
	* jQuery
	* YUI
	* etc.


### Back-End:
* preparation of the structured content that is delivered to the client, storing user input
* Languages:
	* Ruby
	* Python
	* PHP
	* etc.
* Frameworks: 
	* Ruby on Rails
	* Django
	* etc.

### 3. Testing

Web applications undergo the same unit, integration and system testing as traditional desktop applications. But because web application clients vary so greatly, teams might perform some additional testing, such as: 

* Security
* Performance, Load, and Stress
* HTML/CSS validation
* Accessibility
* Usability
* Cross-browser

Many types of tests are automatable. At the component level, one of the xUnit packages can be a helpful tool. Or an organization can create its own unit testing framework. At the GUI level, Watir or iMacros are useful.

# Best Practices
* **D.R.Y** - Don't Repeat Yourself
* **Commenting**
* **Testing**
* **Seperation of Concerns** - Keep your templating, styling, and behaviours seperated


